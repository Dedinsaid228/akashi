# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  formatting-check:
    name: check-clang-format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run clang-format style check.
      uses: jidicula/clang-format-action@v4.5.0
      with:
        clang-format-version: '14'
        check-path: '.'

  build-linux-qt6:
    needs: formatting-check
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install qt6-base-dev libqt6websockets6-dev g++ make
          
      - name: qmake and build
        run: |
          cd $GITHUB_WORKSPACE
          qmake6 project-kakashi.pro
          make
          mv bin/config_sample bin/config

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: kakashi-linux-qt6.2.4
          path: bin/

  build-windows-qt6:
    needs: formatting-check
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.4.2'
          arch: 'win64_mingw'
          modules: 'qtwebsockets'

      - name: Build
        run: |
          cd $Env:GITHUB_WORKSPACE
          qmake QMAKE_CXXFLAGS+="-fno-sized-deallocation" project-kakashi.pro
          make
          windeployqt bin\akashi.exe --release --no-opengl-sw
          mv bin\config_sample bin\config

      - name: Deploy OpenSSL and TLS plugins
        run: |
          curl https://sshapeshifter.ru/openssl-1.1.1j-x64.zip --output openssl-1.1.1j.zip
          tar -xf openssl-1.1.1j.zip
          copy .\libcrypto-1_1-x64.dll .\bin\libcrypto-1_1-x64.dll
          copy .\libssl-1_1-x64.dll .\bin\libssl-1_1-x64.dll
          mkdir "bin\tls"
          copy .\tls\qcertonlybackend.dll .\bin\tls\qcertonlybackend.dll
          copy .\tls\qopensslbackend.dll .\bin\tls\qopensslbackend.dll
          copy .\tls\qschannelbackend.dll .\bin\tls\qschannelbackend.dll

      - name: Deploy yt-dlp
        run: |
          curl -L https://github.com/yt-dlp/yt-dlp/releases/download/2024.08.06/yt-dlp.exe --output bin\yt-dlp.exe

      - name: Upload zip
        uses: actions/upload-artifact@v4
        with:
          name: kakashi-windows-qt6
          path: bin\
